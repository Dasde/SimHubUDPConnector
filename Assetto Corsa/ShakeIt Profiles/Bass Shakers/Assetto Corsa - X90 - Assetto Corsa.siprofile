{
  "CarChoices": [],
  "IncludeOutputSettingsInProfile": false,
  "UnmuteEffectsAfterSimhubRestart": true,
  "EffectsContainers": [
    {
      "ContainerType": "GroupContainer",
      "IsEnabled": true,
      "Gain": 100.0,
      "Description": "Road Rumble",
      "EffectsContainers": [
        {
          "ContainerType": "CustomEffectContainer",
          "IsEnabled": true,
          "Gain": 44.727272727272293,
          "Description": "Road Rumble on Grass",
          "FrontLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFLSurface') == 'Grass')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "FrontRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFRSurface') == 'Grass')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelRLSurface') == 'Grass')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "\r\nif ($prop('UDPConnectorDataPlugin.WheelRRSurface') == 'Grass')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "ForceFrequencies": false,
          "FrontLeftFrequencyFormula": {
            "Expression": ""
          },
          "FrontRightFrequencyFormula": {
            "Expression": ""
          },
          "RearLeftFrequencyFormula": {
            "Expression": ""
          },
          "RearRightFrequencyFormula": {
            "Expression": ""
          },
          "ContainerId": "7ec91635-5a94-4c28-a242-be5bb87bb6a5",
          "AggregationMode": "Corners",
          "Filter": {
            "GammaValue": 1.3,
            "InputGain": 100.0,
            "MinimumForce": 0,
            "Threshold": 0,
            "FilterType": "GammaFilter"
          },
          "Output": {
            "UsePrehemptiveMode": false,
            "Frequency": 32,
            "UseHighFrequency": true,
            "HighFrequency": 26,
            "WhiteNoise": 2,
            "UseWhiteNoise": true,
            "FrequencyBasedOnPreFilter": false,
            "Harmonics": 0,
            "HoldMode": 1,
            "OutputType": "ToneOutput"
          }
        },
        {
          "ContainerType": "CustomEffectContainer",
          "IsEnabled": true,
          "Gain": 29.696969696969745,
          "Description": "Road Rumble on ExtraTurf",
          "FrontLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFLSurface') == 'ExtraTurf')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "FrontRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFRSurface') == 'ExtraTurf')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelRLSurface') == 'ExtraTurf')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "\r\nif ($prop('UDPConnectorDataPlugin.WheelRRSurface') == 'ExtraTurf')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "ForceFrequencies": false,
          "FrontLeftFrequencyFormula": {
            "Expression": ""
          },
          "FrontRightFrequencyFormula": {
            "Expression": ""
          },
          "RearLeftFrequencyFormula": {
            "Expression": ""
          },
          "RearRightFrequencyFormula": {
            "Expression": ""
          },
          "ContainerId": "3dcbb8f3-cbad-4c90-8c08-bad3503a40d9",
          "AggregationMode": "Corners",
          "Filter": {
            "GammaValue": 1.3,
            "InputGain": 100.0,
            "MinimumForce": 0,
            "Threshold": 0,
            "FilterType": "GammaFilter"
          },
          "Output": {
            "UsePrehemptiveMode": false,
            "Frequency": 32,
            "UseHighFrequency": true,
            "HighFrequency": 26,
            "WhiteNoise": 2,
            "UseWhiteNoise": true,
            "FrequencyBasedOnPreFilter": false,
            "Harmonics": 0,
            "HoldMode": 1,
            "OutputType": "ToneOutput"
          }
        },
        {
          "ContainerType": "CustomEffectContainer",
          "IsEnabled": true,
          "Gain": 85.454545454545041,
          "Description": "Road Rumble on Gravel",
          "FrontLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFLSurface') == 'Gravel')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "FrontRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFRSurface') == 'Gravel')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelRLSurface') == 'Gravel')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "\r\nif ($prop('UDPConnectorDataPlugin.WheelRRSurface') == 'Gravel')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "ForceFrequencies": false,
          "FrontLeftFrequencyFormula": {
            "Expression": ""
          },
          "FrontRightFrequencyFormula": {
            "Expression": ""
          },
          "RearLeftFrequencyFormula": {
            "Expression": ""
          },
          "RearRightFrequencyFormula": {
            "Expression": ""
          },
          "ContainerId": "df7c2d5f-8169-46a4-8d06-5c117ce473aa",
          "AggregationMode": "Corners",
          "Filter": {
            "GammaValue": 1.3,
            "InputGain": 100.0,
            "MinimumForce": 0,
            "Threshold": 0,
            "FilterType": "GammaFilter"
          },
          "Output": {
            "UsePrehemptiveMode": false,
            "Frequency": 32,
            "UseHighFrequency": true,
            "HighFrequency": 26,
            "WhiteNoise": 2,
            "UseWhiteNoise": true,
            "FrequencyBasedOnPreFilter": false,
            "Harmonics": 0,
            "HoldMode": 1,
            "OutputType": "ToneOutput"
          }
        },
        {
          "ContainerType": "CustomEffectContainer",
          "IsEnabled": true,
          "Gain": 100.0,
          "Description": "Road Rumble on Kerb",
          "FrontLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFLSurface') == 'Kerb' || isnull($prop('UDPConnectorDataPlugin.WheelFLSurfaceVibrationGain'),0) > 0)\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "FrontRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFRSurface') == 'Kerb' || isnull($prop('UDPConnectorDataPlugin.WheelFRSurfaceVibrationGain'),0) > 0)\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelRLSurface') == 'Kerb' || isnull($prop('UDPConnectorDataPlugin.WheelRLSurfaceVibrationGain'),0) > 0)\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "\r\nif ($prop('UDPConnectorDataPlugin.WheelRRSurface') == 'Kerb' || isnull($prop('UDPConnectorDataPlugin.WheelRRSurfaceVibrationGain'),0) > 0)\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "ForceFrequencies": false,
          "FrontLeftFrequencyFormula": {
            "Expression": ""
          },
          "FrontRightFrequencyFormula": {
            "Expression": ""
          },
          "RearLeftFrequencyFormula": {
            "Expression": ""
          },
          "RearRightFrequencyFormula": {
            "Expression": ""
          },
          "ContainerId": "1261e52d-10b9-48ef-b9a1-b287441ef5fb",
          "AggregationMode": "Corners",
          "Filter": {
            "GammaValue": 1.3,
            "InputGain": 100.0,
            "MinimumForce": 0,
            "Threshold": 0,
            "FilterType": "GammaFilter"
          },
          "Output": {
            "UsePrehemptiveMode": false,
            "Frequency": 32,
            "UseHighFrequency": true,
            "HighFrequency": 26,
            "WhiteNoise": 2,
            "UseWhiteNoise": true,
            "FrequencyBasedOnPreFilter": false,
            "Harmonics": 0,
            "HoldMode": 1,
            "OutputType": "ToneOutput"
          }
        },
        {
          "ContainerType": "CustomEffectContainer",
          "IsEnabled": true,
          "Gain": 14.666666666666515,
          "Description": "Road Rumble on Old",
          "FrontLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFLSurface') == 'Old')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "FrontRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFRSurface') == 'Old')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelRLSurface') == 'Old')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "\r\nif ($prop('UDPConnectorDataPlugin.WheelRRSurface') == 'Old')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "ForceFrequencies": false,
          "FrontLeftFrequencyFormula": {
            "Expression": ""
          },
          "FrontRightFrequencyFormula": {
            "Expression": ""
          },
          "RearLeftFrequencyFormula": {
            "Expression": ""
          },
          "RearRightFrequencyFormula": {
            "Expression": ""
          },
          "ContainerId": "df145dfc-87c2-462c-9412-e3f90b3a6a7e",
          "AggregationMode": "Corners",
          "Filter": {
            "GammaValue": 1.3,
            "InputGain": 100.0,
            "MinimumForce": 0,
            "Threshold": 0,
            "FilterType": "GammaFilter"
          },
          "Output": {
            "UsePrehemptiveMode": false,
            "Frequency": 32,
            "UseHighFrequency": true,
            "HighFrequency": 26,
            "WhiteNoise": 2,
            "UseWhiteNoise": true,
            "FrequencyBasedOnPreFilter": false,
            "Harmonics": 0,
            "HoldMode": 1,
            "OutputType": "ToneOutput"
          }
        },
        {
          "ContainerType": "CustomEffectContainer",
          "IsEnabled": true,
          "Gain": 75.272727272727252,
          "Description": "Road Rumble on Sand",
          "FrontLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFLSurface') == 'Sand')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "FrontRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFRSurface') == 'Sand')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelRLSurface') == 'Sand')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "\r\nif ($prop('UDPConnectorDataPlugin.WheelRRSurface') == 'Sand')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "ForceFrequencies": false,
          "FrontLeftFrequencyFormula": {
            "Expression": ""
          },
          "FrontRightFrequencyFormula": {
            "Expression": ""
          },
          "RearLeftFrequencyFormula": {
            "Expression": ""
          },
          "RearRightFrequencyFormula": {
            "Expression": ""
          },
          "ContainerId": "1efea112-6bc2-46d8-bf82-d9b95d3e914a",
          "AggregationMode": "Corners",
          "Filter": {
            "GammaValue": 1.3,
            "InputGain": 100.0,
            "MinimumForce": 0,
            "Threshold": 0,
            "FilterType": "GammaFilter"
          },
          "Output": {
            "UsePrehemptiveMode": false,
            "Frequency": 32,
            "UseHighFrequency": true,
            "HighFrequency": 26,
            "WhiteNoise": 2,
            "UseWhiteNoise": true,
            "FrequencyBasedOnPreFilter": false,
            "Harmonics": 0,
            "HoldMode": 1,
            "OutputType": "ToneOutput"
          }
        },
        {
          "ContainerType": "CustomEffectContainer",
          "IsEnabled": true,
          "Gain": 69.939393939393767,
          "Description": "Road Rumble on Ice",
          "FrontLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFLSurface') == 'Ice')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "FrontRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFRSurface') == 'Ice')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelRLSurface') == 'Ice')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "\r\nif ($prop('UDPConnectorDataPlugin.WheelRRSurface') == 'Ice')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "ForceFrequencies": false,
          "FrontLeftFrequencyFormula": {
            "Expression": ""
          },
          "FrontRightFrequencyFormula": {
            "Expression": ""
          },
          "RearLeftFrequencyFormula": {
            "Expression": ""
          },
          "RearRightFrequencyFormula": {
            "Expression": ""
          },
          "ContainerId": "0e3f5bc9-a255-4561-bdc6-af5e4f43b9db",
          "AggregationMode": "Corners",
          "Filter": {
            "GammaValue": 1.3,
            "InputGain": 100.0,
            "MinimumForce": 0,
            "Threshold": 0,
            "FilterType": "GammaFilter"
          },
          "Output": {
            "UsePrehemptiveMode": false,
            "Frequency": 32,
            "UseHighFrequency": true,
            "HighFrequency": 26,
            "WhiteNoise": 2,
            "UseWhiteNoise": true,
            "FrequencyBasedOnPreFilter": false,
            "Harmonics": 0,
            "HoldMode": 1,
            "OutputType": "ToneOutput"
          }
        },
        {
          "ContainerType": "CustomEffectContainer",
          "IsEnabled": true,
          "Gain": 59.757575757575751,
          "Description": "Road Rumble on Snow",
          "FrontLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFLSurface') == 'Snow')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "FrontRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelFRSurface') == 'Snow')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelFRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "if ($prop('UDPConnectorDataPlugin.WheelRLSurface') == 'Snow')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRLSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "RearRightFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "\r\nif ($prop('UDPConnectorDataPlugin.WheelRRSurface') == 'Snow')\r\nreturn evaluateGain($prop('UDPConnectorDataPlugin.WheelRRSurfaceVibrationGain'));\r\nreturn 0;",
            "PreExpression": "function mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n\treturn Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}\r\n\r\nfunction evaluateGain(gainProp) {\r\n\tlet speedKMH = isnull($prop('SpeedKmh'),0); \r\n\tif ( speedKMH < 3) return 0;\r\n\tlet vibrationGain = isnull(gainProp, 0);\r\n\tlet speedRatio = mapRange($prop('SpeedKmh'), 3, 50, 0, 1);\r\n\tif (vibrationGain > 0) return Math.min(100, 5 * vibrationGain * speedRatio * 100);\r\n\treturn 100 * speedRatio;\r\n}"
          },
          "ForceFrequencies": false,
          "FrontLeftFrequencyFormula": {
            "Expression": ""
          },
          "FrontRightFrequencyFormula": {
            "Expression": ""
          },
          "RearLeftFrequencyFormula": {
            "Expression": ""
          },
          "RearRightFrequencyFormula": {
            "Expression": ""
          },
          "ContainerId": "ba97aa5a-74e4-42ce-ac35-124c3920a254",
          "AggregationMode": "Corners",
          "Filter": {
            "GammaValue": 1.3,
            "InputGain": 100.0,
            "MinimumForce": 0,
            "Threshold": 0,
            "FilterType": "GammaFilter"
          },
          "Output": {
            "UsePrehemptiveMode": false,
            "Frequency": 32,
            "UseHighFrequency": true,
            "HighFrequency": 26,
            "WhiteNoise": 2,
            "UseWhiteNoise": true,
            "FrequencyBasedOnPreFilter": false,
            "Harmonics": 0,
            "HoldMode": 1,
            "OutputType": "ToneOutput"
          }
        }
      ],
      "ContainerId": "9f2b4690-6973-418a-ab8e-c76ed030b589",
      "Filter": null,
      "Output": null
    },
    {
      "ContainerType": "CustomEffectContainer",
      "IsEnabled": true,
      "Gain": 100.0,
      "Description": "Collisions",
      "FrontLeftFormula": {
        "JSExt": 0,
        "Interpreter": 1,
        "Expression": "if( \r\n\t(getCollidedWith(150) != 'None') && \r\n\t(isnull($prop('UDPConnectorDataPlugin.CollisionPositionX'),0)>-0.5) && \r\n\t(isnull($prop('UDPConnectorDataPlugin.CollisionPositionZ'),0)>0.5) \r\n)\r\n    return startVibrating( 100, 500, true);\r\nreturn stopVibrating();",
        "PreExpression": "let collidedWith = 'None';\r\n//const TEMPO = 1000;\r\nlet nextUpdate = 0;\r\nlet vibrationStopTime = 0;\r\nlet currentIntensity = 0;\r\nfunction startVibrating(intensity, duration, useSpeedRatio) {\r\n    vibrationStopTime = Date.now() + duration;\r\n    if (useSpeedRatio)\r\n        currentIntensity = intensity * getSpeedRatio();\r\n    else currentIntensity = intensity;\r\n    return currentIntensity;\r\n}\r\n\r\nfunction stopVibrating() {\r\n    if (vibrationStopTime <= Date.now())\r\n        currentIntensity = 0;\r\n    return currentIntensity;\r\n}\r\n\r\nfunction updateCollidedWith(tempo) {\r\n    let currentCollidedWith = isnull($prop('UDPConnectorDataPlugin.CollidedWith'), 'None');\r\n    if (currentCollidedWith != 'None') {\r\n        collidedWith = currentCollidedWith;\r\n        nextUpdate = Date.now() + tempo;//TEMPO;\r\n    } else {\r\n        if (nextUpdate <= Date.now())\r\n            collidedWith = 'None';\r\n    }\r\n}\r\n\r\nfunction getCollidedWith(tempo) {\r\n    updateCollidedWith(tempo);\r\n    return collidedWith;\r\n}\r\n\r\nfunction getSpeedRatio() {\r\n    let speedPlayer = $prop('SpeedKmh');\r\n    let speedCollider = $prop('UDPConnectorDataPlugin.ColliderSpeed');\r\n    let speed = Math.max(speedCollider, speedPlayer);\r\n    if (speed < 1) return 0;\r\n    return mapRange(speed, 1, 50, 0.5, 1);\r\n}\r\n\r\nfunction mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n    return Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}"
      },
      "FrontRightFormula": {
        "JSExt": 0,
        "Interpreter": 1,
        "Expression": "if( \r\n    (getCollidedWith(150) != 'None') && \r\n    (isnull($prop('UDPConnectorDataPlugin.CollisionPositionX'),0)<0.5) && \r\n    (isnull($prop('UDPConnectorDataPlugin.CollisionPositionZ'),0)>0.5) \r\n)\r\n    return startVibrating( 100, 500, true);\r\nreturn stopVibrating();",
        "PreExpression": "let collidedWith = 'None';\r\n//const TEMPO = 1000;\r\nlet nextUpdate = 0;\r\nlet vibrationStopTime = 0;\r\nlet currentIntensity = 0;\r\nfunction startVibrating(intensity, duration, useSpeedRatio) {\r\n    vibrationStopTime = Date.now() + duration;\r\n    if (useSpeedRatio)\r\n        currentIntensity = intensity * getSpeedRatio();\r\n    else currentIntensity = intensity;\r\n    return currentIntensity;\r\n}\r\n\r\nfunction stopVibrating() {\r\n    if (vibrationStopTime <= Date.now())\r\n        currentIntensity = 0;\r\n    return currentIntensity;\r\n}\r\n\r\nfunction updateCollidedWith(tempo) {\r\n    let currentCollidedWith = isnull($prop('UDPConnectorDataPlugin.CollidedWith'), 'None');\r\n    if (currentCollidedWith != 'None') {\r\n        collidedWith = currentCollidedWith;\r\n        nextUpdate = Date.now() + tempo;//TEMPO;\r\n    } else {\r\n        if (nextUpdate <= Date.now())\r\n            collidedWith = 'None';\r\n    }\r\n}\r\n\r\nfunction getCollidedWith(tempo) {\r\n    updateCollidedWith(tempo);\r\n    return collidedWith;\r\n}\r\n\r\nfunction getSpeedRatio() {\r\n    let speedPlayer = $prop('SpeedKmh');\r\n    let speedCollider = $prop('UDPConnectorDataPlugin.ColliderSpeed');\r\n    let speed = Math.max(speedCollider, speedPlayer);\r\n    if (speed < 1) return 0;\r\n    return mapRange(speed, 1, 50, 0.5, 1);\r\n}\r\n\r\nfunction mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n    return Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}"
      },
      "RearLeftFormula": {
        "JSExt": 0,
        "Interpreter": 1,
        "Expression": "if( \r\n    (getCollidedWith(150) != 'None') && \r\n    (isnull($prop('UDPConnectorDataPlugin.CollisionPositionX'),0)>-0.5) && \r\n    (isnull($prop('UDPConnectorDataPlugin.CollisionPositionZ'),0)<-0.5) \r\n)\r\n    return startVibrating( 100, 500, true);\r\nreturn stopVibrating();",
        "PreExpression": "let collidedWith = 'None';\r\n//const TEMPO = 1000;\r\nlet nextUpdate = 0;\r\nlet vibrationStopTime = 0;\r\nlet currentIntensity = 0;\r\nfunction startVibrating(intensity, duration, useSpeedRatio) {\r\n    vibrationStopTime = Date.now() + duration;\r\n    if (useSpeedRatio)\r\n        currentIntensity = intensity * getSpeedRatio();\r\n    else currentIntensity = intensity;\r\n    return currentIntensity;\r\n}\r\n\r\nfunction stopVibrating() {\r\n    if (vibrationStopTime <= Date.now())\r\n        currentIntensity = 0;\r\n    return currentIntensity;\r\n}\r\n\r\nfunction updateCollidedWith(tempo) {\r\n    let currentCollidedWith = isnull($prop('UDPConnectorDataPlugin.CollidedWith'), 'None');\r\n    if (currentCollidedWith != 'None') {\r\n        collidedWith = currentCollidedWith;\r\n        nextUpdate = Date.now() + tempo;//TEMPO;\r\n    } else {\r\n        if (nextUpdate <= Date.now())\r\n            collidedWith = 'None';\r\n    }\r\n}\r\n\r\nfunction getCollidedWith(tempo) {\r\n    updateCollidedWith(tempo);\r\n    return collidedWith;\r\n}\r\n\r\nfunction getSpeedRatio() {\r\n    let speedPlayer = $prop('SpeedKmh');\r\n    let speedCollider = $prop('UDPConnectorDataPlugin.ColliderSpeed');\r\n    let speed = Math.max(speedCollider, speedPlayer);\r\n    if (speed < 1) return 0;\r\n    return mapRange(speed, 1, 50, 0.5, 1);\r\n}\r\n\r\nfunction mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n    return Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}"
      },
      "RearRightFormula": {
        "JSExt": 0,
        "Interpreter": 1,
        "Expression": "if( \r\n    (getCollidedWith(150) != 'None') && \r\n    (isnull($prop('UDPConnectorDataPlugin.CollisionPositionX'),0)<0.5) && \r\n    (isnull($prop('UDPConnectorDataPlugin.CollisionPositionZ'),0)<-0.5) \r\n)\r\n    return startVibrating( 100, 500, true);\r\nreturn stopVibrating();",
        "PreExpression": "let collidedWith = 'None';\r\n//const TEMPO = 1000;\r\nlet nextUpdate = 0;\r\nlet vibrationStopTime = 0;\r\nlet currentIntensity = 0;\r\nfunction startVibrating(intensity, duration, useSpeedRatio) {\r\n    vibrationStopTime = Date.now() + duration;\r\n    if (useSpeedRatio)\r\n        currentIntensity = intensity * getSpeedRatio();\r\n    else currentIntensity = intensity;\r\n    return currentIntensity;\r\n}\r\n\r\nfunction stopVibrating() {\r\n    if (vibrationStopTime <= Date.now())\r\n        currentIntensity = 0;\r\n    return currentIntensity;\r\n}\r\n\r\nfunction updateCollidedWith(tempo) {\r\n    let currentCollidedWith = isnull($prop('UDPConnectorDataPlugin.CollidedWith'), 'None');\r\n    if (currentCollidedWith != 'None') {\r\n        collidedWith = currentCollidedWith;\r\n        nextUpdate = Date.now() + tempo;//TEMPO;\r\n    } else {\r\n        if (nextUpdate <= Date.now())\r\n            collidedWith = 'None';\r\n    }\r\n}\r\n\r\nfunction getCollidedWith(tempo) {\r\n    updateCollidedWith(tempo);\r\n    return collidedWith;\r\n}\r\n\r\nfunction getSpeedRatio() {\r\n    let speedPlayer = $prop('SpeedKmh');\r\n    let speedCollider = $prop('UDPConnectorDataPlugin.ColliderSpeed');\r\n    let speed = Math.max(speedCollider, speedPlayer);\r\n    if (speed < 1) return 0;\r\n    return mapRange(speed, 1, 50, 0.5, 1);\r\n}\r\n\r\nfunction mapRange(value, oldMin, oldMax, newMin, newMax) {\r\n    return Math.max(Math.min(((value - oldMin) * (newMax - newMin) / (oldMax - oldMin)) + newMin, newMax), newMin);\r\n}"
      },
      "ForceFrequencies": false,
      "FrontLeftFrequencyFormula": {
        "Expression": ""
      },
      "FrontRightFrequencyFormula": {
        "Expression": ""
      },
      "RearLeftFrequencyFormula": {
        "Expression": ""
      },
      "RearRightFrequencyFormula": {
        "Expression": ""
      },
      "ContainerId": "647b2ad8-183b-475f-b15b-8dd98460d1fa",
      "AggregationMode": "Corners",
      "Filter": {
        "GammaValue": 1.2500000000000002,
        "InputGain": 320.0,
        "MinimumForce": 0,
        "Threshold": 0,
        "FilterType": "GammaFilter"
      },
      "Output": {
        "UsePrehemptiveMode": true,
        "Frequency": 26,
        "UseHighFrequency": false,
        "HighFrequency": 50,
        "WhiteNoise": 4,
        "UseWhiteNoise": true,
        "FrequencyBasedOnPreFilter": false,
        "Harmonics": 0,
        "HoldMode": 1,
        "OutputType": "ToneOutput"
      }
    },
    {
      "ContainerType": "CustomEffectContainer",
      "IsEnabled": true,
      "Gain": 89.0,
      "Description": "Simulate Stall / Engine start",
      "FrontLeftFormula": {
        "Expression": "if(changed(100, [EngineStarted]), 100,0)"
      },
      "FrontRightFormula": {
        "Expression": ""
      },
      "RearLeftFormula": {
        "Expression": "if(changed(100, [EngineStarted]), 100,0)"
      },
      "RearRightFormula": {
        "Expression": ""
      },
      "ForceFrequencies": false,
      "FrontLeftFrequencyFormula": {
        "Expression": ""
      },
      "FrontRightFrequencyFormula": {
        "Expression": ""
      },
      "RearLeftFrequencyFormula": {
        "Expression": ""
      },
      "RearRightFrequencyFormula": {
        "Expression": ""
      },
      "ContainerId": "9f27f681-f540-47c6-b88c-5f93433d52c3",
      "AggregationMode": "Front/Rear",
      "Filter": {
        "GammaValue": 1.0,
        "InputGain": 100.0,
        "MinimumForce": 0,
        "Threshold": 0,
        "FilterType": "GammaFilter"
      },
      "Output": {
        "UsePrehemptiveMode": false,
        "Frequency": 44,
        "UseHighFrequency": false,
        "HighFrequency": 50,
        "WhiteNoise": 10,
        "UseWhiteNoise": false,
        "FrequencyBasedOnPreFilter": false,
        "Harmonics": 0,
        "HoldMode": 1,
        "OutputType": "ToneOutput"
      }
    },
    {
      "ContainerType": "GroupContainer",
      "IsEnabled": true,
      "Gain": 100.0,
      "Description": "Rangey Rover : Slip, Under & Over Steer",
      "EffectsContainers": [
        {
          "ContainerType": "CustomEffectContainer",
          "IsEnabled": true,
          "Gain": 90.0,
          "Description": "Front Slip",
          "FrontLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "var degreeRad = Math.PI/180; // 360 degrees to radians, which is 2π radians\r\n\r\n// Angular velocities in radians per second\r\nvar angle2 = NewRawData().Physics.LocalAngularVelocity[2];; // [ UNITS = Radians per-second ] (yaw rate)\r\n\r\n\r\n// Normalized steering input\r\nvar steeringInput = $prop('GameRawData.mSteering'); // [ RANGE = -1.0f->1.0f ]\r\nvar steeringAngleDeg = steeringInput * 24; //Typical steering angle 24 degrees, match to what is set in game\r\n\r\n// Convert normalized steering input to actual steering angle in radians\r\nvar steeringAngleRad = steeringAngleDeg * degreeRad;\r\n\r\n// Local velocities in metres per second\r\nvar local1 = NewRawData().Physics.LocalVelocity[0]; // [ UNITS = Metres per-second ] (Lateral velocity)\r\nvar local3 = NewRawData().Physics.LocalVelocity[2]; // [ UNITS = Metres per-second ] (Longitudinal velocity)\r\n\r\n// Assumed distances to front and rear axles in meters not available in game\r\nvar L_f = 1.2; // Distance to front axle [ UNITS = Metres ]\r\nvar L_r = 1.6; // Distance to rear axle [ UNITS = Metres ] \r\n// Extract yaw rate, lateral and longitudinal velocities\r\nvar yaw_rate = angle2; // Yaw rate in rad/s\r\nvar v_y = local1; // Lateral velocity in m/s\r\nvar v_x = local3; // Longitudinal velocity in m/s\r\n\r\n\r\n// Calculate front slip angle in radians from simplified equation\r\nvar alpha_f = steeringAngleRad - Math.atan((v_y + L_f * yaw_rate) / v_x);\r\n\r\n// Calculate rear slip angle in radians from simplified equation\r\nvar alpha_r = -Math.atan((v_y - L_r * yaw_rate) / v_x);\r\n\r\n// Convert slip angles from radians to degrees\r\nvar alpha_f_deg = alpha_f * (180 / Math.PI);\r\nvar alpha_r_deg = alpha_r * (180 / Math.PI);\r\n\r\n//Output slip x 2\r\nreturn Math.abs(alpha_f_deg *2);"
          },
          "FrontRightFormula": {
            "Expression": ""
          },
          "RearLeftFormula": {
            "Expression": ""
          },
          "RearRightFormula": {
            "Expression": ""
          },
          "ForceFrequencies": false,
          "FrontLeftFrequencyFormula": {
            "Expression": ""
          },
          "FrontRightFrequencyFormula": {
            "Expression": ""
          },
          "RearLeftFrequencyFormula": {
            "Expression": ""
          },
          "RearRightFrequencyFormula": {
            "Expression": ""
          },
          "ContainerId": "a4673780-4abd-4ef4-81ab-54b009c60270",
          "AggregationMode": "Front/Rear",
          "Filter": {
            "GammaValue": 1.0,
            "InputGain": 100.0,
            "MinimumForce": 0,
            "Threshold": 5,
            "FilterType": "GammaFilter"
          },
          "Output": {
            "UsePrehemptiveMode": false,
            "Frequency": 44,
            "UseHighFrequency": false,
            "HighFrequency": 50,
            "WhiteNoise": 10,
            "UseWhiteNoise": false,
            "FrequencyBasedOnPreFilter": false,
            "Harmonics": 0,
            "HoldMode": 1,
            "OutputType": "ToneOutput"
          }
        },
        {
          "ContainerType": "CustomEffectContainer",
          "IsEnabled": true,
          "Gain": 90.0,
          "Description": "Rangey Under & Over Steer",
          "FrontLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "var degreeRad = Math.PI/180; // 360 degrees to radians, which is 2π radians\r\n\r\n// Angular velocities in radians per second\r\nvar angle2 = NewRawData().Physics.LocalAngularVelocity[2];; // [ UNITS = Radians per-second ] (yaw rate)\r\n\r\n\r\n// Normalized steering input\r\nvar steeringInput = $prop('GameRawData.mSteering'); // [ RANGE = -1.0f->1.0f ]\r\nvar steeringAngleDeg = steeringInput * 24; //Typical steering angle 24 degrees, match to what is set in game\r\n\r\n// Convert normalized steering input to actual steering angle in radians\r\nvar steeringAngleRad = steeringAngleDeg * degreeRad;\r\n\r\n// Local velocities in metres per second\r\nvar local1 = NewRawData().Physics.LocalVelocity[0]; // [ UNITS = Metres per-second ] (Lateral velocity)\r\nvar local3 = NewRawData().Physics.LocalVelocity[2]; // [ UNITS = Metres per-second ] (Longitudinal velocity)\r\n\r\n// Assumed distances to front and rear axles in meters not available in game\r\nvar L_f = 1.2; // Distance to front axle [ UNITS = Metres ]\r\nvar L_r = 1.6; // Distance to rear axle [ UNITS = Metres ] \r\n// Extract yaw rate, lateral and longitudinal velocities\r\nvar yaw_rate = angle2; // Yaw rate in rad/s\r\nvar v_y = local1; // Lateral velocity in m/s\r\nvar v_x = local3; // Longitudinal velocity in m/s\r\n\r\n\r\n// Calculate front slip angle in radians from simplified equation\r\nvar alpha_f = steeringAngleRad - Math.atan((v_y + L_f * yaw_rate) / v_x);\r\n\r\n// Calculate rear slip angle in radians from simplified equation\r\nvar alpha_r = -Math.atan((v_y - L_r * yaw_rate) / v_x);\r\n\r\n// Convert slip angles from radians to degrees\r\nvar alpha_f_deg = alpha_f * (180 / Math.PI);\r\nvar alpha_r_deg = alpha_r * (180 / Math.PI);\r\n\r\n//Output understeer in degrees\r\nvar under = Math.abs(alpha_f_deg) - Math.abs(alpha_r_deg); //understeer\r\nif(under<=0){\r\nunder = 0;\r\n}\r\n\r\nreturn Math.abs(under) * 10;"
          },
          "FrontRightFormula": {
            "Expression": ""
          },
          "RearLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "var degreeRad = Math.PI/180; // 360 degrees to radians, which is 2π radians\r\n\r\n// Angular velocities in radians per second\r\nvar angle2 = NewRawData().Physics.LocalAngularVelocity[2];; // [ UNITS = Radians per-second ] (yaw rate)\r\n\r\n\r\n// Normalized steering input\r\nvar steeringInput = $prop('GameRawData.mSteering'); // [ RANGE = -1.0f->1.0f ]\r\nvar steeringAngleDeg = steeringInput * 24; //Typical steering angle 24 degrees, match to what is set in game\r\n\r\n// Convert normalized steering input to actual steering angle in radians\r\nvar steeringAngleRad = steeringAngleDeg * degreeRad;\r\n\r\n// Local velocities in metres per second\r\nvar local1 = NewRawData().Physics.LocalVelocity[0]; // [ UNITS = Metres per-second ] (Lateral velocity)\r\nvar local3 = NewRawData().Physics.LocalVelocity[2]; // [ UNITS = Metres per-second ] (Longitudinal velocity)\r\n\r\n// Assumed distances to front and rear axles in meters not available in game\r\nvar L_f = 1.2; // Distance to front axle [ UNITS = Metres ]\r\nvar L_r = 1.6; // Distance to rear axle [ UNITS = Metres ] \r\n// Extract yaw rate, lateral and longitudinal velocities\r\nvar yaw_rate = angle2; // Yaw rate in rad/s\r\nvar v_y = local1; // Lateral velocity in m/s\r\nvar v_x = local3; // Longitudinal velocity in m/s\r\n\r\n\r\n// Calculate front slip angle in radians from simplified equation\r\nvar alpha_f = steeringAngleRad - Math.atan((v_y + L_f * yaw_rate) / v_x);\r\n\r\n// Calculate rear slip angle in radians from simplified equation\r\nvar alpha_r = -Math.atan((v_y - L_r * yaw_rate) / v_x);\r\n\r\n// Convert slip angles from radians to degrees\r\nvar alpha_f_deg = alpha_f * (180 / Math.PI);\r\nvar alpha_r_deg = alpha_r * (180 / Math.PI);\r\n\r\n//Output Oversteer in degrees\r\nvar over =  Math.abs(alpha_r_deg) - Math.abs(alpha_f_deg); //Oversteer\r\nif(over<=0){\r\nover = 0;\r\n}\r\n\r\nreturn Math.abs(over) * 10;"
          },
          "RearRightFormula": {
            "Expression": ""
          },
          "ForceFrequencies": false,
          "FrontLeftFrequencyFormula": {
            "Expression": ""
          },
          "FrontRightFrequencyFormula": {
            "Expression": ""
          },
          "RearLeftFrequencyFormula": {
            "Expression": ""
          },
          "RearRightFrequencyFormula": {
            "Expression": ""
          },
          "ContainerId": "2d4ab968-79cf-4971-a85f-b21b09e198c1",
          "AggregationMode": "Front/Rear",
          "Filter": {
            "GammaValue": 0.74999999999999978,
            "InputGain": 100.0,
            "MinimumForce": 0,
            "Threshold": 5,
            "FilterType": "GammaFilter"
          },
          "Output": {
            "UsePrehemptiveMode": false,
            "Frequency": 44,
            "UseHighFrequency": false,
            "HighFrequency": 50,
            "WhiteNoise": 10,
            "UseWhiteNoise": false,
            "FrequencyBasedOnPreFilter": false,
            "Harmonics": 0,
            "HoldMode": 1,
            "OutputType": "ToneOutput"
          }
        },
        {
          "ContainerType": "CustomEffectContainer",
          "IsEnabled": true,
          "Gain": 90.0,
          "Description": "Rear Slip",
          "FrontLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": ""
          },
          "FrontRightFormula": {
            "Expression": ""
          },
          "RearLeftFormula": {
            "JSExt": 0,
            "Interpreter": 1,
            "Expression": "var degreeRad = Math.PI/180; // 360 degrees to radians, which is 2π radians\r\n\r\n// Angular velocities in radians per second\r\nvar angle2 = NewRawData().Physics.LocalAngularVelocity[2];; // [ UNITS = Radians per-second ] (yaw rate)\r\n\r\n\r\n// Normalized steering input\r\nvar steeringInput = $prop('GameRawData.mSteering'); // [ RANGE = -1.0f->1.0f ]\r\nvar steeringAngleDeg = steeringInput * 24; //Typical steering angle 24 degrees, match to what is set in game\r\n\r\n// Convert normalized steering input to actual steering angle in radians\r\nvar steeringAngleRad = steeringAngleDeg * degreeRad;\r\n\r\n// Local velocities in metres per second\r\nvar local1 = NewRawData().Physics.LocalVelocity[0]; // [ UNITS = Metres per-second ] (Lateral velocity)\r\nvar local3 = NewRawData().Physics.LocalVelocity[2]; // [ UNITS = Metres per-second ] (Longitudinal velocity)\r\n\r\n// Assumed distances to front and rear axles in meters not available in game\r\nvar L_f = 1.2; // Distance to front axle [ UNITS = Metres ]\r\nvar L_r = 1.6; // Distance to rear axle [ UNITS = Metres ] \r\n// Extract yaw rate, lateral and longitudinal velocities\r\nvar yaw_rate = angle2; // Yaw rate in rad/s\r\nvar v_y = local1; // Lateral velocity in m/s\r\nvar v_x = local3; // Longitudinal velocity in m/s\r\n\r\n\r\n// Calculate front slip angle in radians from simplified equation\r\nvar alpha_f = steeringAngleRad - Math.atan((v_y + L_f * yaw_rate) / v_x);\r\n\r\n// Calculate rear slip angle in radians from simplified equation\r\nvar alpha_r = -Math.atan((v_y - L_r * yaw_rate) / v_x);\r\n\r\n// Convert slip angles from radians to degrees\r\nvar alpha_f_deg = alpha_f * (180 / Math.PI);\r\nvar alpha_r_deg = alpha_r * (180 / Math.PI);\r\n\r\n//Output slip x 2\r\nreturn Math.abs(alpha_r_deg *2);"
          },
          "RearRightFormula": {
            "Expression": ""
          },
          "ForceFrequencies": false,
          "FrontLeftFrequencyFormula": {
            "Expression": ""
          },
          "FrontRightFrequencyFormula": {
            "Expression": ""
          },
          "RearLeftFrequencyFormula": {
            "Expression": ""
          },
          "RearRightFrequencyFormula": {
            "Expression": ""
          },
          "ContainerId": "8cc4e3d2-442d-40bd-b45d-fc0118931e91",
          "AggregationMode": "Front/Rear",
          "Filter": {
            "GammaValue": 1.0,
            "InputGain": 100.0,
            "MinimumForce": 0,
            "Threshold": 5,
            "FilterType": "GammaFilter"
          },
          "Output": {
            "UsePrehemptiveMode": false,
            "Frequency": 44,
            "UseHighFrequency": false,
            "HighFrequency": 50,
            "WhiteNoise": 10,
            "UseWhiteNoise": false,
            "FrequencyBasedOnPreFilter": false,
            "Harmonics": 0,
            "HoldMode": 1,
            "OutputType": "ToneOutput"
          }
        }
      ],
      "ContainerId": "4a3b64fd-8304-4fcc-af41-b222fb1e4582",
      "Filter": null,
      "Output": null
    },
    {
      "ContainerType": "WheelsSlipContainer",
      "IsEnabled": false,
      "Gain": 100.0,
      "Description": "Provide localized wheel slip feedback",
      "BrakeFilter": 10,
      "MuteWhenLockEffectIsActive": false,
      "ThrottleFilter": 10,
      "UseBrakeFilter": false,
      "UseThrottleFilter": false,
      "UseLegacyIracingAlgorythm": false,
      "ContainerId": "bf6f8d18-aed2-43a3-bf3d-f967af01f8a0",
      "AggregationMode": "Front/Rear",
      "Filter": {
        "GammaValue": 1.0,
        "InputGain": 120.0,
        "MinimumForce": 0,
        "Threshold": 90,
        "FilterType": "GammaFilter"
      },
      "Output": {
        "UsePrehemptiveMode": false,
        "Frequency": 65,
        "UseHighFrequency": true,
        "HighFrequency": 70,
        "WhiteNoise": 2,
        "UseWhiteNoise": true,
        "FrequencyBasedOnPreFilter": false,
        "Harmonics": 0,
        "HoldMode": 1,
        "OutputType": "ToneOutput"
      }
    },
    {
      "ContainerType": "ABSActiveEffectContainer",
      "IsEnabled": true,
      "Gain": 64.6800000000004,
      "Description": "Provides feedback when ABS is currently active",
      "ContainerId": "36c2722b-8831-4879-8e4c-e3ffde9404af",
      "Filter": {
        "Duration": 85,
        "FilterType": "PulseFilter"
      },
      "Output": {
        "UsePrehemptiveMode": false,
        "Frequency": 43,
        "Harmonics": 0,
        "OutputType": "SingleToneOutput"
      }
    },
    {
      "ContainerType": "RPMSoundEffectContainer",
      "IsEnabled": true,
      "Gain": 23.559999999999633,
      "Description": "Simulates engine vibration",
      "PitchOffset": 0,
      "CutOff": 180.0,
      "LoadSensitivity": 50.0,
      "ContainerId": "3a0e5b96-3053-4091-b1e9-30b22963b628",
      "Filter": null,
      "Output": {
        "EngineMode": 3,
        "UseBank1": false,
        "UseBank3": true,
        "OutputType": "RpmBankOutput"
      }
    },
    {
      "ContainerType": "GearEffectContainer",
      "IsEnabled": true,
      "Gain": 100.0,
      "Description": "Provides a pulse effect for gear shifting",
      "ModulateGainUsingRpms": false,
      "MaxFeedbackRpmPercent": 90,
      "MinFeedbackRpmPercent": 50,
      "GearMode": 2,
      "AlwaysIgnoreNeutral": false,
      "IgnoreNeutral": true,
      "NeutralDebouningTime": 200.0,
      "EngagingDebouningTime": 1000.0,
      "ContainerId": "f078120f-926f-48fb-a25e-de61c3ade220",
      "Filter": {
        "Duration": 68,
        "FilterType": "PulseFilter"
      },
      "Output": {
        "UsePrehemptiveMode": true,
        "Frequency": 32,
        "Harmonics": 0,
        "OutputType": "SingleToneOutput"
      }
    },
    {
      "ContainerType": "GearMissedContainer",
      "IsEnabled": true,
      "Gain": 79.800000000000182,
      "Description": "Provides feedback for missed gears (manual cars only, based on H-Pattern controller)",
      "Gear1": {},
      "Gear2": {},
      "Gear3": {},
      "Gear4": {},
      "Gear5": {},
      "Gear6": {},
      "Gear7": {},
      "GearR": {},
      "ContainerId": "676e5965-b7ca-42a3-84a8-547e1e8e1931",
      "Filter": {
        "GammaValue": 1.2,
        "FilterType": "SimpleGammaFilter"
      },
      "Output": {
        "UsePrehemptiveMode": false,
        "Frequency": 24,
        "UseHighFrequency": false,
        "HighFrequency": 55,
        "WhiteNoise": 10,
        "UseWhiteNoise": false,
        "FrequencyBasedOnPreFilter": false,
        "Harmonics": 0,
        "HoldMode": 1,
        "OutputType": "ToneOutput"
      }
    },
    {
      "ContainerType": "WheelsImpactContainer",
      "IsEnabled": true,
      "Gain": 100.0,
      "Description": "Provides localized feedback for bumps and other wheels impact on road",
      "AutocalibrationMin": 38.0,
      "ContainerId": "b96bb736-b624-41ba-9f62-5736891fd0aa",
      "AggregationMode": "Front/Rear",
      "Filter": {
        "GammaValue": 1.0,
        "InputGain": 100.0,
        "MinimumForce": 0,
        "Threshold": 0,
        "FilterType": "GammaFilter"
      },
      "Output": {
        "UsePrehemptiveMode": false,
        "Frequency": 40,
        "UseHighFrequency": true,
        "HighFrequency": 20,
        "WhiteNoise": 10,
        "UseWhiteNoise": false,
        "FrequencyBasedOnPreFilter": true,
        "Harmonics": 0,
        "HoldMode": 1,
        "OutputType": "ToneOutput"
      }
    },
    {
      "ContainerType": "WheelsVibrationContainer",
      "IsEnabled": true,
      "Gain": 100.0,
      "Description": "Provides localized road vibration based on suspension telemetry",
      "AutocalibrationMax": 100.0,
      "UseAutoThreshold": true,
      "AutoThresholdValue": 56.0,
      "ContainerId": "123ce72b-5930-47f5-95d7-80eb995c1cdb",
      "AggregationMode": "Front/Rear",
      "Filter": {
        "GammaValue": 1.0,
        "InputGain": 100.0,
        "MinimumForce": 0,
        "Threshold": 15,
        "FilterType": "GammaFilter"
      },
      "Output": {
        "UsePrehemptiveMode": false,
        "Frequency": 38,
        "UseHighFrequency": true,
        "HighFrequency": 30,
        "WhiteNoise": 10,
        "UseWhiteNoise": false,
        "FrequencyBasedOnPreFilter": true,
        "Harmonics": 0,
        "HoldMode": 1,
        "OutputType": "ToneOutput"
      }
    },
    {
      "ContainerType": "RPMContainer",
      "IsEnabled": true,
      "Gain": 18.640000000000271,
      "Description": "Simulates engine RPMS with a full customizable RPM/response curve",
      "ContainerId": "9b503b23-6867-4f9e-8922-adb9e46a5a43",
      "Filter": {
        "ControlPoints": [
          "6.03245460577909;90.9698437606604",
          "22.4407311334982;51.3961247185645",
          "44.1575677143029;39.3620113256464",
          "92.1276467394583;54.8675035819062",
          "100;69.4472948079416",
          "83.9235084755988;46.7676195674422",
          "66.2604813898776;39.1305860680903"
        ],
        "CurveFitting": 0,
        "FilterType": "SplineFilter"
      },
      "Output": {
        "UsePrehemptiveMode": false,
        "Frequency": 42,
        "UseHighFrequency": true,
        "HighFrequency": 48,
        "WhiteNoise": 2,
        "UseWhiteNoise": true,
        "FrequencyBasedOnPreFilter": true,
        "Harmonics": 0,
        "HoldMode": 1,
        "OutputType": "ToneOutput"
      }
    },
    {
      "ContainerType": "RoadTextureContainer",
      "IsEnabled": true,
      "Gain": 35.75999999999982,
      "Description": "Simulate the road texture based on speed",
      "Grain": 50.0,
      "LowSpeed": 5,
      "HighSpeed": 120,
      "ContainerId": "abd7b683-bf99-412b-95b9-dd0e22aa5b55",
      "Filter": {
        "GammaValue": 1.05,
        "FilterType": "SimpleGammaFilter"
      },
      "Output": {
        "UsePrehemptiveMode": false,
        "Frequency": 42,
        "UseHighFrequency": true,
        "HighFrequency": 58,
        "WhiteNoise": 10,
        "UseWhiteNoise": false,
        "FrequencyBasedOnPreFilter": false,
        "Harmonics": 0,
        "HoldMode": 1,
        "OutputType": "ToneOutput"
      }
    },
    {
      "ContainerType": "TCActiveEffectContainer",
      "IsEnabled": true,
      "Gain": 63.746666666666556,
      "Description": "Provides feedback when TC is currently active",
      "ContainerId": "de4b04d0-afa7-4090-b158-03fbc3546805",
      "Filter": {
        "Duration": 80,
        "FilterType": "PulseFilter"
      },
      "Output": {
        "UsePrehemptiveMode": false,
        "Frequency": 55,
        "Harmonics": 0,
        "OutputType": "SingleToneOutput"
      }
    },
    {
      "ContainerType": "WheelsLockContainer",
      "IsEnabled": true,
      "Gain": 100.0,
      "Description": "Provide localized wheel slip and lock feedback under braking",
      "IsLock": true,
      "UseLegacyIracingAlgorythm": false,
      "LockSensibility": 50.0,
      "BrakeFilter": 20,
      "ContainerId": "07d57e2a-1a25-43d3-a8c9-d03c38de0405",
      "AggregationMode": "Front/Rear",
      "Filter": {
        "GammaValue": 1.0,
        "InputGain": 100.0,
        "MinimumForce": 0,
        "Threshold": 0,
        "FilterType": "GammaFilter"
      },
      "Output": {
        "UsePrehemptiveMode": true,
        "Frequency": 50,
        "UseHighFrequency": true,
        "HighFrequency": 55,
        "WhiteNoise": 5,
        "UseWhiteNoise": true,
        "FrequencyBasedOnPreFilter": false,
        "Harmonics": 0,
        "HoldMode": 1,
        "OutputType": "ToneOutput"
      }
    }
  ],
  "AutoCalibrationRatio2": 0,
  "OutputMode": 1,
  "GlobalGain": 50.0,
  "UseProfileGain": false,
  "LastLoaded": "2023-10-15T05:39:44.2978602+02:00",
  "Name": "Assetto Corsa",
  "ProfileId": "f6a40fbd-b89b-4c81-a642-c50be9d61cd7",
  "GameCode": "AssettoCorsa",
  "CarChoice": null
}